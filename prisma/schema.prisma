generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @unique
  username     String    @unique
  auth_session Session[]
  key          Key[]
  role         String    @default("user")
  logs         Logs[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Logs {
  id      Int      @id @default(autoincrement())
  user_id String
  type    String
  data    String
  date    DateTime
  user    User     @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model League {
  id      Int      @id @default(autoincrement())
  name    String
  teams   Team[]
  seasons season[]
  games   games[]
}

model Team {
  id              String            @id @unique
  name            String            @unique
  team_owner      String            @default("")
  championships   String?
  leagueId        Int
  color           String            @default("#FFFFFF")
  description     String            @default("")
  capSpace        Int               @default(36000)
  players         Player[]
  league          League            @relation(fields: [leagueId], references: [id])
  game_team_stats game_team_stats[]
  home_games      games[]           @relation(name: "home_team")
  away_games      games[]           @relation(name: "away_team")
}

model Player {
  id                 Int                  @id @default(autoincrement())
  uuid               String               @unique
  username           String
  number             Int                  @default(0)
  goalie             Boolean              @default(false)
  awards             String?
  league_roles       String?
  teamId             String
  contractTier       String               @default("Amateur")
  contractLength     Int                  @default(1)
  contractPrice      Int                  @default(1500)
  team               Team                 @relation(fields: [teamId], references: [id])
  game_goalie_stats  game_goalie_stats[]
  game_player_stats  game_player_stats[]
  allTimeSkaterStats allTimeSkaterStats[]
  allTimeGoalieStats allTimeGoalieStats[]
}

model season {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  leagueId Int
  games    games[]
  league   League  @relation(fields: [leagueId], references: [id])
}

model games {
  id                Int                 @id @default(autoincrement())
  home_teamId       String              @default("FA")
  away_teamId       String              @default("FA")
  date              DateTime
  is_playoff        Boolean             @default(false)
  is_overtime       Boolean             @default(false)
  leagueId          Int
  seasonId          String
  home_team         Team                @relation(name: "home_team", fields: [home_teamId], references: [id])
  away_team         Team                @relation(name: "away_team", fields: [away_teamId], references: [id])
  game_goalie_stats game_goalie_stats[]
  game_player_stats game_player_stats[]
  game_team_stats   game_team_stats[]
  season            season              @relation(fields: [seasonId], references: [name])
  league            League              @relation(fields: [leagueId], references: [id])
}

model game_team_stats {
  id            Int     @id @default(autoincrement())
  teamId        String
  goals_scored  Int     @default(0)
  goals_allowed Int     @default(0)
  gameId        Int
  playoff       Boolean @default(false)
  overtime      Boolean @default(false)
  game          games   @relation(fields: [gameId], references: [id])
  team          Team    @relation(fields: [teamId], references: [id])
}

model game_player_stats {
  id           Int    @id @default(autoincrement())
  playerId     Int
  goals_scored Int    @default(0)
  assists      Int    @default(0)
  touches      Int    @default(0)
  blocks       Int    @default(0)
  time_on_ice  Int    @default(0)
  gameId       Int
  game         games  @relation(fields: [gameId], references: [id])
  player       Player @relation(fields: [playerId], references: [id])
}

model game_goalie_stats {
  id            Int     @id @default(autoincrement())
  playerId      Int
  shots         Int     @default(0)
  saves         Int     @default(0)
  goals_allowed Int     @default(0)
  time_on_ice   Int     @default(0)
  gameId        Int
  shutout       Boolean @default(false)
  game          games   @relation(fields: [gameId], references: [id])
  player        Player  @relation(fields: [playerId], references: [id])
}

model allTimeSkaterStats {
  id             Int    @id @default(autoincrement())
  playerId       Int    @unique
  seasons_played Int    @default(0)
  games_played   Int    @default(0)
  goals          Int    @default(0)
  assists        Int    @default(0)
  points         Int    @default(0)
  player         Player @relation(fields: [playerId], references: [id])
}

model allTimeGoalieStats {
  id             Int    @id @default(autoincrement())
  playerId       Int    @unique
  seasons_played Int    @default(0)
  games_played   Int    @default(0)
  wins           Int    @default(0)
  losses         Int    @default(0)
  shutouts       Int    @default(0)
  shots          Int    @default(0)
  goals_allowed  Int    @default(0)
  saves          Int    @default(0)
  player         Player @relation(fields: [playerId], references: [id])
}
